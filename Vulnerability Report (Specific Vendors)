import requests
import json
import smtplib
import win32com.client
from email.mime.text import MIMEText

# Your vulndb API key
api_key = "your-api-key-here"

# Check if the user's email is stored in a file
try:
  with open("email.txt", "r") as f:
    email_to = f.read()
except FileNotFoundError:
  # If the file does not exist, ask the user for their email
  email_to = input("Enter the email address where the results should be sent: ")
  # Save the user's email to a file
  with open("email.txt", "w") as f:
    f.write(email_to)

# Make an HTTP GET request to the vulndb API to get the latest vulnerabilities for the past week
response = requests.get("https://vulndb.cyberriskanalytics.com/api/v3/search?since=7d&api_key={api_key}")
vulnerabilities = response.json()

# Construct the email
email_subject = "Weekly Vulnerability Report for Products Used"
email_body = "The latest vulnerabilities for the past week:\n"
for vulnerability in vulnerabilities:
  email_body += f"- {vulnerability['title']}\n"

msg = MIMEText(email_body)
msg['Subject'] = email_subject
msg['To'] = email_to
msg['From'] = "vulnerability-report@example.com"

# Send the email
smtp_server = smtplib.SMTP('smtp.example.com')
smtp_server.sendmail("vulnerability-report@example.com", [email_to], msg.as_string())
smtp_server.quit()

# Create a Windows task to run the script every Friday at noon
task_name = "Weekly Vulnerability Report"
schedule_time = "WEEKLY"
schedule_day = "FR"
schedule_hour = "12"
schedule_minute = "0"
script_path = "C:\\path\\to\\script.py"

schedule_xml = f'<ScheduleByWeek week="1" day="{schedule_day}" wkst="SU" start="{schedule_hour}:{schedule_minute}:00"><Time>{schedule_hour}:{schedule_minute}:00</Time></ScheduleByWeek>'

schedule = win32com.client.Dispatch("Schedule.Service")
schedule.Connect()
root_folder = schedule.GetFolder("\\")
task_definition = schedule.NewTask(0)

task_definition.RegistrationInfo.Description = task_name

task_definition.Triggers.Create(schedule_time, enabled=True, XML=schedule_xml)

task_definition.Actions.Create(win32com.client.constants.TASK_ACTION_EXEC)
task_definition.Actions[0].Path = script_path

root_folder.RegisterTaskDefinition(task_name, task_definition, win32com.client.constants.TASK_CREATE_OR_UPDATE, "SYSTEM", None, win32com.client.constants.TASK_LOGON_NONE)


